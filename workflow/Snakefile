from snakemake.utils import validate
from snakemake.utils import min_version
import pandas as pd
import os

min_version("7.18")

DATA_DIR = "/nfs/data/patients_networks/data"
RESULT_DIR = "results"


META_FILE = "expression_raw/TCGA_phenotype_denseDataOnlyDownload.tsv"
CLINICAL_FILE = "expression_raw/Survival_SupplementalTable_S1_20171025_xena_sp"
MAPPING_FILE = "expression_raw/probeMap%2Fgencode.v23.annotation.gene.probemap"

RAW_EXPR_COUNTS_FILE = "expression_raw/tcga_gene_expected_count"
RAW_EXPR_TPM_FILE = "expression_raw/tcga_RSEM_gene_tpm"

KNOWN_TFS_FILE = "genie3/TF_names_v_1.01.txt"

CANCER_TYPES = ["COAD", "LUSC", "STAD", "LUAD", "THCA", "HNSC", "LIHC", "PRAD", "KIRC", "BRCA", "KIRP"]
NORM_METHODS = ["tpm", "mrn"]
METHODS = ["dysregnet", "ssn"]

# map different normalization methods to their sample sheets
META_MAP = {"tpm":"tpm", "mrn":"expected_counts"}


wildcard_constraints:
    cancer_type="|".join(CANCER_TYPES+["shared"]),
    norm_method="|".join(NORM_METHODS),
    method = "|".join(METHODS+["dysregnet_signed"]),

# helper functions

def get_ref_net_path(wildcards):
    ref_net = wildcards.ref_net
    if ref_net.startswith("genie3"):
        splitted = ref_net.split("_")
        return f"{RESULT_DIR}/reference_networks/genie3/{splitted[1]}/{ref_net}.csv"
    elif ref_net.startswith("exp"):
        return f"{RESULT_DIR}/reference_networks/HTRIdb_data.csv"

    elif ref_net.startswith("string"):
        return f"{RESULT_DIR}/reference_networks/string.csv"

    else:
        return f"{RESULT_DIR}/reference_networks/{ref_net}.csv"


def get_genie3_patient_network_outputs(method, norm_method, cancer_types = CANCER_TYPES):
    outputs = []
    for cancer_type in cancer_types:
        pattern = f"{RESULT_DIR}/patient_networks/{cancer_type}/{method}/{norm_method}-genie3_{{network_type}}_{norm_method}.top_100k.fea"
        individual = pattern.format(network_type=cancer_type)
        shared = pattern.format(network_type="shared")
        outputs.append(individual)
        outputs.append(shared)
    return outputs

def get_shared_ref_net_names(norm_method):
    shared_network_names =  ["exp",
                             "string",
                             f"genie3_shared_{norm_method}.top_100k"
                             ]
    return shared_network_names

def get_ref_net_types(norm_method):
    return get_shared_ref_net_names(norm_method) + [f"genie3_individual_{norm_method}.top_100k"]

def get_ref_net_names(ref_net_type, norm_method, cancer_types = CANCER_TYPES):
    """
    Purpose of this method is, to get the different ref nets used for genie3_individual for each cancer
    :param ref_net_type: string has to start with 'exp', 'string', 'genie3_shared', or 'genie3_individual'
    :param norm_method: the norm method
    :param cancer_types: list of cancer types
    :return: a list with the ref net used for each cancer type in cancer_types
    """

    if ref_net_type.startswith("exp"):
        return ["exp"] * len(cancer_types)
    elif ref_net_type.startswith("string"):
        return ["string"] * len(cancer_types)
    elif ref_net_type.startswith("genie3_shared"):
        return [f"genie3_shared_{norm_method}.top_100k"] * len(cancer_types)
    elif ref_net_type.startswith("genie3_individual"):
        return [f"genie3_{cancer_type}_{norm_method}.top_100k" for cancer_type in cancer_types]
    else:
        raise Exception(f"Unknown ref_net_type: {ref_net_type}")




#### reference network preparation ####

rule prepare_HTRIdb:
    input:
        f"{DATA_DIR}/reference_networks/HTRIdb_data.csv"
    output:
        f"{RESULT_DIR}/reference_networks/HTRIdb_data.csv"
    log:
        "logs/prepare_HTRIdb.log"
    shell:
        "python workflow/scripts/prepare_HTRIdb.py --input {input} --output {output} >& {log}"


rule prepare_string:
    input:
        f"{DATA_DIR}/reference_networks/string.csv"
    output:
        f"{RESULT_DIR}/reference_networks/string.csv"
    log:
        "logs/prepare_string.log"
    shell:
        "python workflow/scripts/prepare_string.py --input {input} --output {output} >& {log}"




#### expression data pre-processing ####

rule process_pancan_expected_counts:
    input:
        meta = f"{DATA_DIR}/{META_FILE}",
        clinical = f"{DATA_DIR}/{CLINICAL_FILE}",
        expr = f"{DATA_DIR}/{RAW_EXPR_COUNTS_FILE}",
        mapping = f"{DATA_DIR}/{MAPPING_FILE}",
    params:
        out_dir = f"{RESULT_DIR}/expression_processed",
    output:
        expand("{result_dir}/expression_processed/{cancer_type}/expected_counts.csv",
            result_dir=RESULT_DIR, cancer_type=CANCER_TYPES),
        expand("{result_dir}/expression_processed/{cancer_type}/expected_counts_meta.csv",
            result_dir=RESULT_DIR, cancer_type=CANCER_TYPES)
    log:
        "logs/process_pancan_expected_counts.log"
    shell:
        "python workflow/scripts/process_pancan_expected_counts.py "
        "--meta {input.meta} "
        "--clinical {input.clinical} "
        "--expr {input.expr} "
        "--mapping {input.mapping} "
        "--out_dir {params.out_dir} "
        " >& {log}"


rule process_pancan_tpm:
    input:
        meta = f"{DATA_DIR}/{META_FILE}",
        clinical = f"{DATA_DIR}/{CLINICAL_FILE}",
        expr = f"{DATA_DIR}/{RAW_EXPR_TPM_FILE}",
        mapping = f"{DATA_DIR}/{MAPPING_FILE}",
    params:
        out_dir = f"{RESULT_DIR}/expression_processed",
    output:
        expand("{result_dir}/expression_processed/{cancer_type}/tpm.csv",
            result_dir=RESULT_DIR, cancer_type=CANCER_TYPES),
        expand("{result_dir}/expression_processed/{cancer_type}/tpm_meta.csv",
            result_dir=RESULT_DIR, cancer_type=CANCER_TYPES)
    log:
        "logs/process_pancan_tpm.log"
    shell:
        "python workflow/scripts/process_pancan_tpm.py "
        "--meta {input.meta} "
        "--clinical {input.clinical} "
        "--expr {input.expr} "
        "--mapping {input.mapping} "
        "--out_dir {params.out_dir} "
        ">& {log} "


rule mrn_normalization:
    input:
        expr=f"{RESULT_DIR}/expression_processed/{{cancer_type}}/expected_counts.csv",
        meta=f"{RESULT_DIR}/expression_processed/{{cancer_type}}/expected_counts_meta.csv",
    output:
        f"{RESULT_DIR}/expression_processed/{{cancer_type}}/mrn.csv"
    log:
        "logs/mrn_normalization/mrn_normalization_{cancer_type}.log"
    threads: 8
    shell:
        "Rscript workflow/scripts/mrn_normalization.R {input.expr} {input.meta} {output} >& {log}"



#### reference network creation ####

rule genie3:
    input:
        expr = f"{RESULT_DIR}/expression_processed/{{cancer_type}}/{{norm_method}}.csv",
        meta = lambda wildcards: f"{RESULT_DIR}/expression_processed/{wildcards.cancer_type}/{META_MAP[wildcards.norm_method]}_meta.csv",
        known_tfs = f"{DATA_DIR}/{KNOWN_TFS_FILE}",
    output:
        f"{RESULT_DIR}/reference_networks/genie3/{{cancer_type}}/genie3_{{cancer_type}}_{{norm_method}}.csv"

    log:
        "logs/genie3/genie3_{cancer_type}_{norm_method}.log"
    threads: 30
    shell:
        "Rscript workflow/scripts/genie_run.R "
        "--expr {input.expr} "
        "--meta {input.meta} "
        "--known_tfs {input.known_tfs} "
        "--threads {threads} "
        "--output {output} "
        ">& {log} "


rule genie3_shared:
    input:
        expand("{result_dir}/reference_networks/genie3/{cancer_type}/genie3_{cancer_type}_{{norm_method}}.csv",
            result_dir=RESULT_DIR, cancer_type=CANCER_TYPES),
    output:
        f"{RESULT_DIR}/reference_networks/genie3/shared/genie3_shared_{{norm_method}}.csv"
    log:
        "logs/genie3_shared/genie3_shared_{norm_method}.log"
    resources:
        io=1
    shell:
        "python workflow/scripts/genie3_shared.py --input {input} --output {output} &> {log}"


rule genie3_top:
    input:
        f"{RESULT_DIR}/reference_networks/genie3/{{cancer_type}}/genie3_{{cancer_type}}_{{norm_method}}.csv"
    output:
        f"{RESULT_DIR}/reference_networks/genie3/{{cancer_type}}/genie3_{{cancer_type}}_{{norm_method}}.top_{{top_k}}k.csv"
    log:
        "logs/genie3_top/genie3_{cancer_type}_{norm_method}.top_{top_k}k.log"
    resources:
        io=1
    shell:
        "python workflow/scripts/genie3_top.py --input {input} --top_k {wildcards.top_k} --output {output} &> {log}"



#### patient-specific network creation ####

rule dysregnet:
    input:
        expr = f"{RESULT_DIR}/expression_processed/{{cancer_type}}/{{norm_method}}.csv",
        meta = lambda wildcards: f"{RESULT_DIR}/expression_processed/{wildcards.cancer_type}/{META_MAP[wildcards.norm_method]}_meta.csv",
        grn =  get_ref_net_path
    output:
        f"{RESULT_DIR}/patient_networks/{{cancer_type}}/dysregnet/{{norm_method}}-{{ref_net}}.fea"
    log:
        "logs/dysregnet/{cancer_type}/{norm_method}-{ref_net}.log"
    shell:
        "python workflow/scripts/dysregnet_run.py "
        "--expr {input.expr} "
        "--meta {input.meta} "
        "--grn {input.grn} "
        "--output {output} "
        "&> {log}"


rule ssn:
    input:
        expr = f"{RESULT_DIR}/expression_processed/{{cancer_type}}/{{norm_method}}.csv",
        meta = lambda wildcards: f"{RESULT_DIR}/expression_processed/{wildcards.cancer_type}/{META_MAP[wildcards.norm_method]}_meta.csv",
        grn =  get_ref_net_path
    output:
        f"{RESULT_DIR}/patient_networks/{{cancer_type}}/ssn/{{norm_method}}-{{ref_net}}.fea"
    log:
        "logs/ssn/{cancer_type}/{norm_method}-{ref_net}.log"
    shell:
        "python workflow/scripts/ssn_run.py "
        "--expr {input.expr} "
        "--meta {input.meta} "
        "--grn {input.grn} "
        "--output {output} "
        "&> {log}"


rule lioness:
    input:
        expr = f"{RESULT_DIR}/expression_processed/{{cancer_type}}/{{norm_method}}.csv",
        meta = lambda wildcards: f"{RESULT_DIR}/expression_processed/{wildcards.cancer_type}/{META_MAP[wildcards.norm_method]}_meta.csv",
        grn =  get_ref_net_path
    output:
        f"{RESULT_DIR}/patient_networks/{{cancer_type}}/lioness/{{norm_method}}-{{ref_net}}.fea"
    log:
        "logs/lioness/{cancer_type}/{norm_method}-{ref_net}.log"
    benchmark:
        "logs/lioness/{cancer_type}/{norm_method}-{ref_net}.txt"
    shell:
        "Rscript workflow/scripts/lioness_run.R "
        "--expr {input.expr} "
        "--meta {input.meta} "
        "--grn {input.grn} "
        "--output {output} "
        "&> {log}"



#### benchmark ####

rule compute_overlap:
    input:
        expand("{result_dir}/patient_networks/{cancer_type}/{{method}}/{{norm_method}}-{{ref_net}}.fea",
            result_dir=RESULT_DIR,cancer_type=CANCER_TYPES),
    output:
        edges = f"{RESULT_DIR}/benchmark/compute_overlap/{{method}}/overlap_edges-{{norm_method}}-{{ref_net}}.fea",
        nodes = f"{RESULT_DIR}/benchmark/compute_overlap/{{method}}/overlap_nodes-{{norm_method}}-{{ref_net}}.fea"
    log:
        "logs/compute_overlap/{method}/overlap-{norm_method}-{ref_net}.log"
    shell:
        "python workflow/scripts/compute_overlap.py "
        "--input {input} "
        "--output_edges {output.edges} "
        "--output_nodes {output.nodes} "
        "&> {log}"

rule compute_overlap_shared:
    input:
        expand("{result_dir}/patient_networks/{cancer_type}/{{method}}/{{norm_method}}-{{ref_net}}.fea",
            result_dir=RESULT_DIR,cancer_type=CANCER_TYPES),
    output:
        edges = f"{RESULT_DIR}/benchmark/compute_overlap_shared/{{method}}/overlap_edges-{{norm_method}}-{{ref_net}}.fea",
        nodes = f"{RESULT_DIR}/benchmark/compute_overlap_shared/{{method}}/overlap_nodes-{{norm_method}}-{{ref_net}}.fea"
    log:
        "logs/compute_overlap_shared/{method}/overlap-{norm_method}-{ref_net}.log"
    shell:
        "python workflow/scripts/compute_overlap.py "
        "--input {input} "
        "--shared "
        "--output_edges {output.edges} "
        "--output_nodes {output.nodes} "
        "&> {log}"


rule clustering:
    input:
        overlaps_edges = f"{RESULT_DIR}/benchmark/compute_overlap/{{method}}/overlap_edges-{{norm_method}}-{{ref_net}}.fea",
        overlaps_nodes = f"{RESULT_DIR}/benchmark/compute_overlap/{{method}}/overlap_nodes-{{norm_method}}-{{ref_net}}.fea",
        meta = f"{DATA_DIR}/{META_FILE}",
    output:
        edges = f"{RESULT_DIR}/figures/clustering/{{method}}/{{method}}-edges-{{norm_method}}-{{ref_net}}.png",
        nodes = f"{RESULT_DIR}/figures/clustering/{{method}}/{{method}}-nodes-{{norm_method}}-{{ref_net}}.png",
    log:
        "logs/clustering/{method}/{norm_method}-{ref_net}.log"
    shell:
        "python workflow/scripts/clustering.py "
        "--overlaps_edges {input.overlaps_edges} "
        "--overlaps_nodes {input.overlaps_nodes} "
        "--meta {input.meta} "
        "--output_edges {output.edges} "
        "--output_nodes {output.nodes} "
        "&> {log}"


rule clustering_shared:
    input:
        overlaps_edges=f"{RESULT_DIR}/benchmark/compute_overlap_shared/{{method}}/overlap_edges-{{norm_method}}-{{ref_net}}.fea",
        overlaps_nodes=f"{RESULT_DIR}/benchmark/compute_overlap_shared/{{method}}/overlap_nodes-{{norm_method}}-{{ref_net}}.fea",
        meta=f"{DATA_DIR}/{META_FILE}",
    output:
        edges=f"{RESULT_DIR}/figures/clustering_shared/{{method}}/{{method}}-edges-{{norm_method}}-{{ref_net}}.png",
        nodes=f"{RESULT_DIR}/figures/clustering_shared/{{method}}/{{method}}-nodes-{{norm_method}}-{{ref_net}}.png",
    log:
        "logs/clustering_shared/{method}/{norm_method}-{ref_net}.log"
    benchmark:
        "logs/clustering_shared/{method}/{norm_method}-{ref_net}.txt"
    shell:
        "python workflow/scripts/clustering.py "
        "--overlaps_edges {input.overlaps_edges} "
        "--overlaps_nodes {input.overlaps_nodes} "
        "--meta {input.meta} "
        "--output_edges {output.edges} "
        "--output_nodes {output.nodes} "
        "&> {log}"


rule clustering_benchmark:
    input:
        input = lambda wildcards:
            expand("{result_dir}/benchmark/compute_overlap/{method}/overlap_edges-{{norm_method}}-{ref_net}.fea",
                result_dir=RESULT_DIR, method=METHODS, ref_net=get_shared_ref_net_names(wildcards.norm_method)
            ),
        meta = f"{DATA_DIR}/{META_FILE}",
    output:
        f"{RESULT_DIR}/figures/clustering_benchmark/f1-{{norm_method}}.png"
    log:
        "logs/clustering_benchmark/f1-{norm_method}.log"
    shell:
        "python workflow/scripts/clustering_benchmark.py "
        "--input {input.input} "
        "--meta {input.meta} "
        "--output {output} "
        "&> {log}"

rule clustering_benchmark_shared:
    input:
        input = lambda wildcards:
            expand("{result_dir}/benchmark/compute_overlap_shared/{method}/overlap_edges-{{norm_method}}-{ref_net}.fea",
                result_dir=RESULT_DIR, method=METHODS, ref_net=get_shared_ref_net_names(wildcards.norm_method)
            ),
        meta = f"{DATA_DIR}/{META_FILE}",
    output:
        f"{RESULT_DIR}/figures/clustering_benchmark_shared/f1-{{norm_method}}.png"
    log:
        "logs/clustering_benchmark_shared/f1-{norm_method}.log"
    shell:
        "python workflow/scripts/clustering_benchmark.py "
        "--input {input.input} "
        "--meta {input.meta} "
        "--output {output} "
        "&> {log}"

#### omics analysis ####

rule methylation_tests:
    input:
        methylation = f"{DATA_DIR}/omics_analysis/methylation.csv",
        networks = lambda wildcards: expand("{result_dir}/patient_networks/{cancer_type}/{{method}}/{{norm_method}}-{ref_net}.fea",
            zip,
            result_dir=[RESULT_DIR]*len(CANCER_TYPES), cancer_type=CANCER_TYPES, ref_net=get_ref_net_names(wildcards.ref_net_type, wildcards.norm_method)),
    output:
        local_out = f"{RESULT_DIR}/omics_analysis/methylation_tests/{{method}}/meth_tests_local-{{norm_method}}-{{ref_net_type}}.npy",
        global_out = f"{RESULT_DIR}/omics_analysis/methylation_tests/{{method}}/meth_tests_global-{{norm_method}}-{{ref_net_type}}.npy"
    log:
        "logs/methylation_tests/{method}/{norm_method}-{ref_net_type}.log"
    shell:
        "python workflow/scripts/methylation_tests.py "
        "--methylation {input.methylation} "
        "--networks {input.networks} "
        "--output_local {output.local_out} "
        "--output_global {output.global_out} "
        "&> {log}"

rule methylation_plots:
    input:
        inputs_local = lambda wildcards: expand(
            rules.methylation_tests.output.local_out,
            ref_net_type=get_ref_net_types(wildcards.norm_method),
            method=wildcards.method,
            norm_method=wildcards.norm_method,
        ),
        inputs_global = lambda wildcards: expand(
            rules.methylation_tests.output.global_out,
            ref_net_type=get_ref_net_types(wildcards.norm_method),
            method=wildcards.method,
            norm_method=wildcards.norm_method,
        ),
    output:
        f"{RESULT_DIR}/figures/omics_analysis/{{method}}/methylation-{{method}}-{{norm_method}}.png"
    log:
        "logs/methylation_plots/{method}-{norm_method}.log"
    shell:
        "python workflow/scripts/methylation_plots.py "
        "--inputs_local {input.inputs_local} "
        "--inputs_global {input.inputs_global} "
        "--output {output} "
        "&> {log}"




rule all:
    input:
        # patient-specific network outputs
        get_genie3_patient_network_outputs(method="dysregnet",norm_method="tpm"),
        get_genie3_patient_network_outputs(method="ssn", norm_method="tpm"),
        get_genie3_patient_network_outputs(method="dysregnet", norm_method="mrn"),
        get_genie3_patient_network_outputs(method="ssn", norm_method="mrn"),
        expand("{result_dir}/patient_networks/{cancer_type}/{method}/{norm_method}-{ref_net}.fea",
            result_dir=RESULT_DIR,
            cancer_type = CANCER_TYPES,
            method = METHODS,
            norm_method = NORM_METHODS,
            ref_net =["exp","string"]
        ),

        # clustering heatmaps shared
        expand("{result_dir}/figures/clustering_shared/{method}/{method}-edges-{norm_method}-{ref_net}.png",
            result_dir=RESULT_DIR, method=["dysregnet", "ssn"], norm_method=NORM_METHODS, ref_net=["exp", "string"]
        ),
        expand("{result_dir}/figures/clustering_shared/{method}/{method}-edges-{norm_method}-genie3_shared_{norm_method}.top_100k.png",
            result_dir=RESULT_DIR, method=["dysregnet", "ssn"], norm_method=NORM_METHODS
        ),


        # clustering benchmark shared
        expand(rules.clustering_benchmark_shared.output, norm_method=NORM_METHODS),

        # methylation plots
        expand(rules.methylation_plots.output, method=["dysregnet","ssn"], norm_method=NORM_METHODS)

    default_target: True



